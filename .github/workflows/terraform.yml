name: "CI/CD with Terraform"

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_REGION: eu-central-1

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      server-public-ip: ${{ steps.set-ip.outputs.server-ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=$AWS_REGION" -lock=false
        working-directory: ./terraform
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
          -var="region=$AWS_REGION" \
          -var="public_key=$PUBLIC_SSH_KEY" \
          -var="private_key=$PRIVATE_SSH_KEY" \
          -var="key_name=deployer_key" \
          -out=PLAN
        working-directory: ./terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: Set output
        id: set-ip
        # run: |
          # echo "server-ip=$(terraform output instance_public_ip)" >> "$GITHUB_OUTPUT"
        run: echo "server-ip=$(terraform output instance_public_ip)" >> "$GITHUB_OUTPUT"
        working-directory: ./terraform
  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set IP env variable
        env:
          SERVER_PUBLIC_IP: ${{ needs.deploy-infra.outputs.server-public-ip }}
        # run: echo "SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.server-public-ip }}" >> "$GITHUB_ENV"
        run: echo "$SERVER_PUBLIC_IP"
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, push docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: simple-rest-api
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: "eu-central-1"
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./simple-rest-api
      - name: Deploy docker image to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: simple-rest-api
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: "eu-central-1"
        uses: appleboy/ssh-action@master
        with:
          host: "$SERVER_PUBLIC_IP"
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: PRIVATE_SSH_KEY,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_REGION,SERVER_PUBLIC_IP
          script: |
            sudo apt update
            sudo apt install docker.io -y
            sudo apt install awscli -y
            sudo $(aws ecr get-login --no-include-email --region eu-central-q);
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainer -p 80:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG 
